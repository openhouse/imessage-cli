#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
imx — export a diarized transcript for a phone number from macOS Messages.
"""

import argparse, os, sys, subprocess, pathlib
from imessage_exporter.exporter import export_conversation, default_output_path

def parse_args():
    p = argparse.ArgumentParser(
        prog="imx",
        description="Export a diarized Markdown or text transcript from macOS Messages for a given phone number."
    )
    p.add_argument("phone", help="Phone number (any format; digits are matched). Example: +14432042987")
    p.add_argument("--me", default=os.environ.get("IMX_ME", "Me"),
                   help='Label for your messages (default: "Me" or $IMX_ME)')
    p.add_argument("--name", default=None, help='Label for the other person (default: last 4 digits of phone)')
    p.add_argument("--out", default=None, help="Output file path (.md or .txt). Defaults to Desktop/<Name>_<date>.md")
    p.add_argument("--txt", action="store_true", help="Output as plain .txt instead of Markdown")
    p.add_argument("--multiline", action="store_true", help="Preserve real newlines instead of ↵")
    p.add_argument("--since", default=None, help="Only include messages on/after this local date (YYYY-MM-DD)")
    p.add_argument("--until", default=None, help="Only include messages before this local date (YYYY-MM-DD)")
    p.add_argument("--copy-attachments", action="store_true",
                   help="Copy attachment files to a folder next to the transcript")
    p.add_argument("--open", action="store_true", help="Open the transcript after export")
    return p.parse_args()

def main():
    a = parse_args()
    out_path = pathlib.Path(a.out) if a.out else default_output_path(a.name or a.phone, a.txt)
    out_path.parent.mkdir(parents=True, exist_ok=True)

    stats = export_conversation(
        phone=a.phone,
        me_label=a.me,
        other_label=a.name,
        output_path=str(out_path),
        as_markdown=not a.txt,
        preserve_newlines=a.multiline,
        since=a.since,
        until=a.until,
        copy_attachments=a.copy_attachments
    )

    print(f"Saved transcript to {out_path}")
    print(f"  messages: {stats['messages']}  attachments: {stats['attachments']}" +
          (f"  copied to: {stats['attachments_dir']}" if stats.get('attachments_dir') else ""))

    if a.open:
        try:
            app = "TextEdit" if out_path.suffix.lower() in (".md", ".txt") else "Preview"
            subprocess.run(["open", "-a", app, str(out_path)], check=False)
        except Exception:
            pass

if __name__ == "__main__":
    main()
