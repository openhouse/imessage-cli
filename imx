#!/usr/bin/env python3
"""Export a unified timeline of events with a single CLI call."""
from __future__ import annotations

import argparse
import json
import pathlib
from datetime import datetime
from typing import List

from imessage_exporter.identity.resolve import resolve_person, preflight_summary
from imessage_exporter.collectors import imessage as imessage_collector
from imessage_exporter.collectors import calls as calls_collector
from imessage_exporter.merge.merge import merge_events
from imessage_exporter.render import markdown as markdown_render
from imessage_exporter.render import jsonl as jsonl_render
from imessage_exporter.render import summary as summary_render


_DEF_SOURCES = "imessage,facetime"


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(prog="imx", description="Export communication timeline")
    p.add_argument("--person", required=True)
    p.add_argument("--phone", action="append", default=[])
    p.add_argument("--email", action="append", default=[])
    p.add_argument("--scope", choices=["direct", "contextual"], default="direct")
    p.add_argument("--sources", default=_DEF_SOURCES)
    p.add_argument("--since")
    p.add_argument("--until")
    p.add_argument("--out", default=str(pathlib.Path.home() / "Desktop" / "timeline.md"))
    p.add_argument("--json")
    p.add_argument("--jsonl")
    p.add_argument("--copy-attachments", action="store_true")
    p.add_argument("--zip", action="store_true")
    p.add_argument("--verbose", action="store_true")
    return p.parse_args()


def parse_date(s: str | None) -> datetime | None:
    return datetime.strptime(s, "%Y-%m-%d") if s else None


def main() -> None:
    args = parse_args()
    person = resolve_person(args.person, phones=args.phone, emails=args.email)
    sources = [s.strip() for s in args.sources.split(",") if s.strip()]
    since = parse_date(args.since)
    until = parse_date(args.until)

    print(preflight_summary(person, sources, args.since, args.until, args.scope))

    iterables = []
    if "imessage" in sources:
        chat_db = pathlib.Path.home() / "Library" / "Messages" / "chat.db"
        iterables.append(
            imessage_collector.collect(person, chat_db, scope=args.scope, since=since, until=until)
        )
    if "facetime" in sources:
        calls_db = pathlib.Path.home() / "Library" / "Application Support" / "CallHistoryDB" / "fake.db"
        iterables.append(calls_collector.collect(person, calls_db, since=since, until=until))

    events = merge_events(*iterables)

    out_path = pathlib.Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    with out_path.open("w", encoding="utf-8") as fh:
        markdown_render.render(events, fh)
    if args.jsonl:
        with open(args.jsonl, "w", encoding="utf-8") as fh:
            jsonl_render.render(events, fh)
    if args.json:
        with open(args.json, "w", encoding="utf-8") as fh:
            json.dump(summary_render.render(events), fh, indent=2)


if __name__ == "__main__":
    main()
